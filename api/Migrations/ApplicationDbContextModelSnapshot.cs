// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DefaultNamespace.ColorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("DefaultNamespace.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DefaultNamespace.ProductAttribute", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductAttributeOptionId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "ProductAttributeOptionId");

                    b.HasIndex("ProductAttributeOptionId");

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("DefaultNamespace.ProductAttributeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeOptionName")
                        .HasColumnType("int");

                    b.Property<int>("ProductAttributeTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeTypeId");

                    b.ToTable("ProductAttributeOptions");
                });

            modelBuilder.Entity("DefaultNamespace.ProductAttributeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductAttributeTypes");
                });

            modelBuilder.Entity("DefaultNamespace.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"));

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CategoryImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SizeCategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("SizeCategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("DefaultNamespace.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductItemId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("DefaultNamespace.ProductItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("ColorModelId")
                        .HasColumnType("int");

                    b.Property<decimal>("OriginalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ColorModelId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductItems");
                });

            modelBuilder.Entity("DefaultNamespace.ProductSizeVariation", b =>
                {
                    b.Property<int>("ProductItemId")
                        .HasColumnType("int");

                    b.Property<int>("SizeOptionsId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.HasKey("ProductItemId", "SizeOptionsId");

                    b.HasIndex("SizeOptionsId");

                    b.ToTable("ProductSizeVariations");
                });

            modelBuilder.Entity("DefaultNamespace.SizeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SizeCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SizeCategories");
                });

            modelBuilder.Entity("DefaultNamespace.SizeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SizeCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SizeCategoryId");

                    b.ToTable("SizeOptions");
                });

            modelBuilder.Entity("DefaultNamespace.Product", b =>
                {
                    b.HasOne("DefaultNamespace.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("DefaultNamespace.ProductAttribute", b =>
                {
                    b.HasOne("DefaultNamespace.ProductAttributeOption", "ProductAttributeOption")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductAttributeOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DefaultNamespace.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductAttributeOption");
                });

            modelBuilder.Entity("DefaultNamespace.ProductAttributeOption", b =>
                {
                    b.HasOne("DefaultNamespace.ProductAttributeType", "ProductAttributeType")
                        .WithMany("ProductAttributeOptions")
                        .HasForeignKey("ProductAttributeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductAttributeType");
                });

            modelBuilder.Entity("DefaultNamespace.ProductCategory", b =>
                {
                    b.HasOne("DefaultNamespace.ProductCategory", "ParentProductCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DefaultNamespace.SizeCategory", "SizeCategory")
                        .WithMany("ProductCategories")
                        .HasForeignKey("SizeCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ParentProductCategory");

                    b.Navigation("SizeCategory");
                });

            modelBuilder.Entity("DefaultNamespace.ProductImage", b =>
                {
                    b.HasOne("DefaultNamespace.ProductItem", "ProductItem")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("DefaultNamespace.ProductItem", b =>
                {
                    b.HasOne("DefaultNamespace.ColorModel", "ColorModel")
                        .WithMany()
                        .HasForeignKey("ColorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DefaultNamespace.Product", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColorModel");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DefaultNamespace.ProductSizeVariation", b =>
                {
                    b.HasOne("DefaultNamespace.ProductItem", "ProductItem")
                        .WithMany("ProductSizeVariations")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DefaultNamespace.SizeOption", "SizeOption")
                        .WithMany("ProductSizeVariations")
                        .HasForeignKey("SizeOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductItem");

                    b.Navigation("SizeOption");
                });

            modelBuilder.Entity("DefaultNamespace.SizeOption", b =>
                {
                    b.HasOne("DefaultNamespace.SizeCategory", "SizeCategory")
                        .WithMany("SizeOptions")
                        .HasForeignKey("SizeCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SizeCategory");
                });

            modelBuilder.Entity("DefaultNamespace.Product", b =>
                {
                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductItems");
                });

            modelBuilder.Entity("DefaultNamespace.ProductAttributeOption", b =>
                {
                    b.Navigation("ProductAttributes");
                });

            modelBuilder.Entity("DefaultNamespace.ProductAttributeType", b =>
                {
                    b.Navigation("ProductAttributeOptions");
                });

            modelBuilder.Entity("DefaultNamespace.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DefaultNamespace.ProductItem", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("ProductSizeVariations");
                });

            modelBuilder.Entity("DefaultNamespace.SizeCategory", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("SizeOptions");
                });

            modelBuilder.Entity("DefaultNamespace.SizeOption", b =>
                {
                    b.Navigation("ProductSizeVariations");
                });
#pragma warning restore 612, 618
        }
    }
}
